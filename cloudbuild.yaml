steps:
  # Step 1: Set the Google Cloud project
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'config'
      - 'set'
      - 'project'
      - 'vanshikatesting'  # Replace with your project ID

  # Step 1.5: Check if the GKE Autopilot cluster deployment exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    id: 'check-cluster'
    args:
      - '-c'
      - |
        # Check if the GKE Autopilot cluster deployment exists
        if gcloud deployment-manager deployments describe autopilot-cluster-deployment --quiet; then
          echo "Deployment already exists. Skipping cluster creation."
          exit 0
        else
          echo "Deployment not found. Proceeding with cluster creation."
          exit 1
        fi

  # Step 2: Deploy the Deployment Manager configuration to create the GKE Autopilot cluster (conditionally)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'deployment-manager'
      - 'deployments'
      - 'create'
      - 'autopilot-cluster-deployment'  # The name of your deployment
      - '--config'
      - 'gke_autopilot.yaml'  # Path to your Deployment Manager configuration
    # Only run this step if the previous check failed (exit code 1)
    waitFor:
      - 'check-cluster'

  # Step 3: Get credentials for the GKE Autopilot cluster
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'autopilot-cluster'  # Replace with your GKE Autopilot cluster name
      - '--region'
      - 'us-east1'           # Replace with the region of your GKE Autopilot cluster
      - '--project'
      - 'vanshikatesting'    # Replace with your project ID

  # Step 4: Deploy Nginx using kubectl
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'kubectl'
    args:
      - 'apply'
      - '-f'
      - 'nginx-deployment.yaml'

options:
  logging: CLOUD_LOGGING_ONLY

# Timeout to prevent long-running builds from hanging
#timeout: '600s'
